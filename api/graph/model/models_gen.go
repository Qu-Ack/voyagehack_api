// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type Doctor struct {
	User      *User    `json:"user"`
	Specialty string   `json:"specialty"`
	Documents []string `json:"documents"`
}

type DoctorInput struct {
	Specialty string   `json:"specialty"`
	Documents []string `json:"documents"`
	UserID    string   `json:"userId"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mail struct {
	ID        string    `json:"id"`
	Sender    string    `json:"sender"`
	Receiver  string    `json:"receiver"`
	Content   string    `json:"content"`
	Documents []*string `json:"documents"`
	Type      EmailType `json:"type"`
	CreatedAt string    `json:"createdAt"`
}

type MailBox struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Sent           []*string `json:"sent"`
	Received       []*string `json:"received"`
	Sentmails      []*Mail   `json:"sentmails"`
	ReceivedEmails []*Mail   `json:"receivedEmails"`
}

type MailBoxSubscriptionResponse struct {
	Sent     *Mail `json:"sent,omitempty"`
	Received *Mail `json:"received,omitempty"`
}

type Message struct {
	Content string `json:"content"`
	Author  string `json:"author"`
}

type MessageSubscriptionResponse struct {
	RoomID  string   `json:"roomId"`
	Message *Message `json:"message"`
}

type Mutation struct {
}

type Query struct {
}

type Room struct {
	ID           string     `json:"id"`
	Messages     []*Message `json:"messages"`
	Participants []string   `json:"participants"`
}

type Subscription struct {
}

type User struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	Email      string `json:"email"`
	ProfilePic string `json:"profilePic"`
	Role       Role   `json:"role"`
}

type UserInput struct {
	Name       string `json:"name"`
	Email      string `json:"email"`
	ProfilePic string `json:"profilePic"`
	Password   string `json:"password"`
}

type SendMailInput struct {
	Receiver  string    `json:"receiver"`
	Content   string    `json:"content"`
	Documents []*string `json:"documents,omitempty"`
}

type SendMessageInput struct {
	Content string `json:"content"`
	RoomID  string `json:"roomId"`
}

type EmailType string

const (
	EmailTypeApplication EmailType = "APPLICATION"
	EmailTypeNormal      EmailType = "NORMAL"
)

var AllEmailType = []EmailType{
	EmailTypeApplication,
	EmailTypeNormal,
}

func (e EmailType) IsValid() bool {
	switch e {
	case EmailTypeApplication, EmailTypeNormal:
		return true
	}
	return false
}

func (e EmailType) String() string {
	return string(e)
}

func (e *EmailType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailType", str)
	}
	return nil
}

func (e EmailType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleRoot   Role = "ROOT"
	RoleDoctor Role = "DOCTOR"
	RoleStaff  Role = "STAFF"
)

var AllRole = []Role{
	RoleRoot,
	RoleDoctor,
	RoleStaff,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleRoot, RoleDoctor, RoleStaff:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
