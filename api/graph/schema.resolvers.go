package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/Qu-Ack/voyagehack_api/api/graph/model"
	"github.com/Qu-Ack/voyagehack_api/services/mail"
	"github.com/Qu-Ack/voyagehack_api/services/messaging"
	"github.com/Qu-Ack/voyagehack_api/services/payment"
	"github.com/Qu-Ack/voyagehack_api/services/user"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	authPayload, err := r.Resolver.UserService.Login(ctx, user.LoginInput{
		Email:    input.Email,
		Password: input.Password,
	})

	if err != nil {
		return nil, err
	}

	return &model.AuthPayload{
		Token: authPayload.Token,
		User: &model.User{
			ID:         authPayload.User.ID,
			Name:       authPayload.User.Name,
			Email:      authPayload.User.Email,
			ProfilePic: authPayload.User.ProfilePic,
			Role:       model.Role(authPayload.User.Role),
		},
	}, nil
}

// CreateDoctor is the resolver for the createDoctor field.
func (r *mutationResolver) CreateDoctor(ctx context.Context, input model.DoctorInput) (*model.Doctor, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	doctor, err := r.UserService.CreateDoctor(ctx, user.DoctorInput{
		Specialty:  input.Specialty,
		ProfilePic: input.ProfilePic,
		Password:   input.Password,
		Email:      input.Email,
		Name:       input.Name,
		Documents:  input.Documents,
	}, user.PublicUser{
		ID:    authedUser.ID,
		Email: authedUser.Email,
		Role:  user.Role(authedUser.Role),
	})

	if err != nil {
		return nil, err
	}
	fmt.Println(input.HospitalID)
	_, err = r.HospitalService.AddParticipant(ctx, "DOCTOR", doctor.ID.Hex(), input.HospitalID)

	if err != nil {
		return nil, err
	}

	_, err = r.MailService.InitializeMailBox(ctx, doctor.Email)
	if err != nil {
		return nil, err
	}

	return &model.Doctor{
		User: &model.User{
			ID:    doctor.ID.Hex(),
			Name:  doctor.Name,
			Role:  model.Role(doctor.Role),
			Email: string(doctor.Role),
		},
		Specialty: doctor.Specialty,
		Documents: doctor.Documents,
	}, nil
}

// CreateRoot is the resolver for the createRoot field.
func (r *mutationResolver) CreateRoot(ctx context.Context, input model.UserInput) (*model.User, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	publicUser, err := r.Resolver.UserService.CreateRoot(ctx, user.UserInput{
		Name:       input.Name,
		Email:      input.Email,
		ProfilePic: input.ProfilePic,
		Password:   input.Password,
	}, user.PublicUser{
		ID:    authedUser.ID,
		Email: authedUser.Email,
		Role:  user.Role(authedUser.Role),
	})

	if err != nil {
		return nil, err
	}

	_, err = r.HospitalService.AddParticipant(ctx, "ROOT", publicUser.ID, input.HospitalID)

	if err != nil {
		return nil, err
	}

	_, err = r.MailService.InitializeMailBox(ctx, publicUser.Email)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:         publicUser.ID,
		Email:      publicUser.Email,
		Role:       model.Role(publicUser.Role),
		ProfilePic: publicUser.ProfilePic,
		Name:       publicUser.Name,
	}, nil
}

// CreateStaff is the resolver for the createStaff field.
func (r *mutationResolver) CreateStaff(ctx context.Context, input model.UserInput) (*model.User, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	publicUser, err := r.Resolver.UserService.CreateStaff(ctx, user.UserInput{
		Name:       input.Name,
		Email:      input.Email,
		ProfilePic: input.ProfilePic,
		Password:   input.Password,
	}, user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	})
	if err != nil {
		return nil, err
	}

	_, err = r.HospitalService.AddParticipant(ctx, "STAFF", publicUser.ID, input.HospitalID)

	if err != nil {
		return nil, err
	}

	_, err = r.MailService.InitializeMailBox(ctx, publicUser.Email)

	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:         publicUser.ID,
		Name:       publicUser.Name,
		Email:      publicUser.Email,
		ProfilePic: publicUser.ProfilePic,
		Role:       model.Role(publicUser.Role),
	}, nil
}

// CreateTestUser is the resolver for the createTestUser field.
func (r *mutationResolver) CreateTestUser(ctx context.Context, input model.TestUserInput) (*model.User, error) {
	_, ok := ctx.Value(UserContextKey).(string)

	if !ok {
		return nil, errors.New("not a test user")
	}

	publicUser, err := r.Resolver.UserService.CreateTestUser(ctx, user.UserInput{
		Name:       input.Name,
		Email:      input.Email,
		ProfilePic: input.ProfilePic,
		Password:   input.Password,
		Role:       user.Role(input.Role),
	})

	if err != nil {
		return nil, err
	}

	_, err = r.MailService.InitializeMailBox(ctx, publicUser.Email)

	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:         publicUser.ID,
		Name:       publicUser.Name,
		Email:      publicUser.Email,
		Role:       model.Role(publicUser.Role),
		ProfilePic: publicUser.ProfilePic,
	}, nil
}

// SendApplication is the resolver for the sendApplication field.
func (r *mutationResolver) SendApplication(ctx context.Context, input model.SendMailInput) (*model.Application, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	fmt.Println("error in sendApplication")

	err := r.PaymentService.ValidatePayment(&payment.ValidatePaymentRequest{
		RazorpayPaymentId: input.RazorpayPaymentID,
		RazorpayOrderId:   input.RazorpayOrderID,
		RazorpaySignature: input.RazorpaySignature,
	}, user.PublicUser{
		ID:    authedUser.ID,
		Email: authedUser.Email,
		Role:  user.Role(authedUser.Role),
	})

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	hospital, err := r.HospitalService.GetHospital(ctx, input.HospitalID)

	if err != nil {
		return nil, err
	}

	fmt.Println(hospital)

	fmt.Println(fmt.Sprintf("GETTING THE HOSPITAL %s", hospital.ID))

	receiverUserId, err := selectRandomParticipant(hospital.Participants.RootUsers)

	if err != nil {
		return nil, err
	}

	fmt.Println("RECEIVED USER ID IS %s", receiverUserId)

	user, err := r.UserService.Me(ctx, receiverUserId.Hex())

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	fmt.Println(fmt.Sprintf("GETTING THE USER %s", user.ID))

	mail, err := r.MailService.SendApplication(ctx, &mail.Mail{
		Content:       input.Content,
		Sender:        authedUser.Email,
		Passport:      input.Passport,
		PatientGender: input.PatientGender,
		PatientName:   input.PatientName,
		Allergies:     input.Allergies,
		PatientAge:    input.PatientAge,
		PhoneNumber:   input.PhoneNumber,
		Receiver:      user.Email,
		Documents:     input.Documents,
		Type:          mail.Application,
		CreatedAt:     primitive.NewDateTimeFromTime(time.Now()),
	})

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	fmt.Println("GETTING THE APPLICATION %s", mail.ID)

	r.ObserverService.PublishMail(user.Email, &model.MailBoxSubscriptionResponse{
		Received: &model.Application{
			ID:             mail.ID.Hex(),
			Sender:         mail.Sender,
			Receiver:       mail.Receiver,
			Content:        mail.Content,
			Documents:      mail.Documents,
			ForwardedChain: mail.ForwardedChain,
			Type:           model.EmailType(mail.Type),
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})
	r.ObserverService.PublishMail(authedUser.Email, &model.MailBoxSubscriptionResponse{
		Sent: &model.Application{
			ID:             mail.ID.Hex(),
			Sender:         mail.Sender,
			Receiver:       mail.Receiver,
			ForwardedChain: mail.ForwardedChain,
			Content:        mail.Content,
			Type:           model.EmailType(mail.Type),
			Documents:      mail.Documents,
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})

	return &model.Application{
		ID:             mail.ID.Hex(),
		Sender:         mail.Sender,
		Receiver:       mail.Receiver,
		Content:        mail.Content,
		Type:           model.EmailType(mail.Type),
		PatientName:    mail.PatientName,
		PhoneNumber:    mail.PhoneNumber,
		Passport:       mail.Passport,
		ForwardedChain: mail.ForwardedChain,
		PatientAge:     mail.PatientAge,
		PatientGender:  mail.PatientGender,
		Allergies:      mail.Allergies,
		Documents:      mail.Documents,
		CreatedAt:      mail.CreatedAt.Time().String(),
	}, nil
}

// SendNormalMail is the resolver for the sendNormalMail field.
func (r *mutationResolver) SendNormalMail(ctx context.Context, input model.SendNormalMailInput) (*model.Mail, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	mail, err := r.MailService.SendNormalMail(ctx, &mail.Mail{
		Content:   input.Content,
		Sender:    authedUser.Email,
		Receiver:  input.Receiver,
		Documents: input.Documents,
		Type:      mail.Normal,
		CreatedAt: primitive.NewDateTimeFromTime(time.Now()),
	}, user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	})

	if err != nil {
		return nil, err
	}

	r.ObserverService.PublishMail(input.Receiver, &model.MailBoxSubscriptionResponse{
		Received: &model.Application{
			ID:             mail.ID.Hex(),
			Sender:         mail.Sender,
			Receiver:       mail.Receiver,
			Content:        mail.Content,
			ForwardedChain: mail.ForwardedChain,
			Type:           model.EmailType(mail.Type),
			Documents:      mail.Documents,
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})
	r.ObserverService.PublishMail(authedUser.Email, &model.MailBoxSubscriptionResponse{
		Sent: &model.Application{
			ID:             mail.ID.Hex(),
			Sender:         mail.Sender,
			Receiver:       mail.Receiver,
			ForwardedChain: mail.ForwardedChain,
			Type:           model.EmailType(mail.Type),
			Content:        mail.Content,
			Documents:      mail.Documents,
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})

	return &model.Mail{
		ID:             mail.ID.Hex(),
		Sender:         mail.Sender,
		Receiver:       mail.Receiver,
		Content:        mail.Content,
		ForwardedChain: mail.ForwardedChain,
		Type:           model.EmailType(mail.Type),
		Documents:      mail.Documents,
		CreatedAt:      mail.CreatedAt.Time().String(),
	}, nil
}

// SendInvitationMail is the resolver for the sendInvitationMail field.
func (r *mutationResolver) SendInvitationMail(ctx context.Context, input *model.SendInvitationInput) (*model.Mail, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	receiverUser, err := r.UserService.Me(ctx, input.Receiver)
	if err != nil {
		return nil, err
	}

	fmt.Println(receiverUser)

	mail, err := r.MailService.SendNormalMail(ctx, &mail.Mail{
		Content:   input.Content,
		Sender:    authedUser.Email,
		Receiver:  receiverUser.Email,
		Documents: convertStringToPointerStringArray(input.Documents),
		Type:      mail.Invitation,
		CreatedAt: primitive.NewDateTimeFromTime(time.Now()),
	}, user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	})

	if err != nil {
		return nil, err
	}

	fmt.Println("before publish")
	r.ObserverService.PublishMail(receiverUser.Email, &model.MailBoxSubscriptionResponse{
		Received: &model.Application{
			ID:             mail.ID.Hex(),
			Sender:         mail.Sender,
			Receiver:       mail.Receiver,
			Content:        mail.Content,
			ForwardedChain: mail.ForwardedChain,
			Type:           model.EmailType(mail.Type),
			Documents:      mail.Documents,
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})
	r.ObserverService.PublishMail(authedUser.Email, &model.MailBoxSubscriptionResponse{
		Sent: &model.Application{
			ID:             mail.ID.Hex(),
			Sender:         mail.Sender,
			Receiver:       mail.Receiver,
			ForwardedChain: mail.ForwardedChain,
			Type:           model.EmailType(mail.Type),
			Content:        mail.Content,
			Documents:      mail.Documents,
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})
	fmt.Println("after publish")

	return &model.Mail{
		ID:             mail.ID.Hex(),
		Sender:         mail.Sender,
		Receiver:       mail.Receiver,
		Content:        mail.Content,
		ForwardedChain: mail.ForwardedChain,
		Type:           model.EmailType(mail.Type),
		Documents:      mail.Documents,
		CreatedAt:      mail.CreatedAt.Time().String(),
	}, nil
}

// StartChat is the resolver for the startChat field.
func (r *mutationResolver) StartChat(ctx context.Context, particpantMail string) (*model.Room, error) {
	fmt.Println("resolver called")
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	// Fetch participant
	participant, err := r.UserService.MeByEmail(ctx, particpantMail)
	if err != nil {
		fmt.Println("user service error:", err)
		return nil, err
	}
	if participant == nil {
		fmt.Println("participant is nil")
		return nil, fmt.Errorf("participant not found")
	}

	// Ensure participant.ID is valid
	if participant.ID == "" {
		return nil, fmt.Errorf("participant has no ID")
	}

	// Create room
	room, err := r.MessagingService.CreateRoom(ctx, participant.ID, user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	})
	if err != nil {
		fmt.Println("messaging service error:", err)
		return nil, err
	}

	// Ensure room is not nil (defensive check)
	if room == nil {
		return nil, fmt.Errorf("failed to create room")
	}

	return &model.Room{
		ID:           room.ID.Hex(),
		Messages:     convertMessages(room.Messages),
		Participants: convertParticipants(room.Participants),
	}, nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, input model.SendMessageInput) (*model.Room, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	room, err := r.MessagingService.SendMessage(ctx, input.RoomID, user.PublicUser{
		ID:    authedUser.ID,
		Email: authedUser.Email,
		Role:  user.Role(authedUser.Role),
	}, &messaging.Message{
		Content: input.Content,
		Author:  authedUser.Email,
	})

	if err != nil {
		return nil, err
	}

	// publish the message to all the subscribed entities

	for _, singleRoom := range room.Participants {
		user, err := r.UserService.Me(ctx, singleRoom.Hex())

		if err != nil {
			return nil, err
		}

		fmt.Println("published message")
		r.ObserverService.PublishMessage(user.Email, &model.MessageSubscriptionResponse{
			RoomID: room.ID.Hex(),
			Message: &model.Message{
				Content: input.Content,
				Author:  authedUser.Email,
			},
		})
	}

	return &model.Room{
		ID:           room.ID.Hex(),
		Messages:     convertMessages(room.Messages),
		Participants: convertParticipants(room.Participants),
	}, nil
}

// ForwardMail is the resolver for the forwardMail field.
func (r *mutationResolver) ForwardMail(ctx context.Context, mailID string, forwardTo string) (*model.Application, error) {
	fmt.Println("in mail service")
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	_, err := r.UserService.MeByEmail(ctx, forwardTo)

	if err != nil {
		return nil, err
	}

	fmt.Println("passed me by Email")

	mail, err := r.MailService.ForwardMail(ctx, forwardTo, mailID, user.PublicUser{
		ID:    authedUser.ID,
		Email: authedUser.Email,
		Role:  user.Role(authedUser.Role),
	})

	if err != nil {
		return nil, err
	}

	fmt.Println(mail)
	fmt.Println("passed forward Mail")

	r.ObserverService.PublishMail(forwardTo, &model.MailBoxSubscriptionResponse{
		Received: &model.Application{
			ID:             mail.ID.Hex(),
			Content:        mail.Content,
			PatientName:    mail.PatientName,
			PatientAge:     mail.PatientAge,
			PatientGender:  mail.PatientGender,
			Passport:       mail.Passport,
			Documents:      mail.Documents,
			Allergies:      mail.Allergies,
			Type:           model.EmailType(mail.Type),
			PhoneNumber:    mail.PhoneNumber,
			ForwardedChain: mail.ForwardedChain,
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})

	r.ObserverService.PublishMail(forwardTo, &model.MailBoxSubscriptionResponse{
		Sent: &model.Application{
			ID:             mail.ID.Hex(),
			Content:        mail.Content,
			PatientName:    mail.PatientName,
			PatientAge:     mail.PatientAge,
			PatientGender:  mail.PatientGender,
			Passport:       mail.Passport,
			Documents:      mail.Documents,
			Allergies:      mail.Allergies,
			ForwardedChain: mail.ForwardedChain,
			Type:           model.EmailType(mail.Type),
			PhoneNumber:    mail.PhoneNumber,
			CreatedAt:      mail.CreatedAt.Time().String(),
		},
	})

	fmt.Println("passed publish mail")

	return &model.Application{
		ID:             mail.ID.Hex(),
		Content:        mail.Content,
		PatientName:    mail.PatientName,
		PatientAge:     mail.PatientAge,
		PatientGender:  mail.PatientGender,
		Passport:       mail.Passport,
		Documents:      mail.Documents,
		Allergies:      mail.Allergies,
		ForwardedChain: mail.ForwardedChain,
		Type:           model.EmailType(mail.Type),
		PhoneNumber:    mail.PhoneNumber,
		CreatedAt:      mail.CreatedAt.Time().String(),
	}, nil
}

// CreatePatient is the resolver for the createPatient field.
func (r *mutationResolver) CreatePatient(ctx context.Context, input model.PatientInput) (*model.User, error) {
	user, err := r.UserService.CreatePatient(ctx, user.UserInput{
		Email:      input.Email,
		ProfilePic: input.ProfilePic,
		Name:       input.Name,
		Password:   input.Password,
		Role:       user.RolePatient,
	})

	if err != nil {
		return nil, err
	}

	_, err = r.MailService.InitializeMailBox(ctx, input.Email)

	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:         user.ID,
		Name:       user.Name,
		Email:      user.Email,
		Role:       model.Role(user.Role),
		ProfilePic: user.ProfilePic,
	}, nil
}

// CloseRoom is the resolver for the closeRoom field.
func (r *mutationResolver) CloseRoom(ctx context.Context, roomid string) (*model.Room, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}
	room, err := r.MessagingService.ChangeRoomState(ctx, "CLOSE", user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	}, roomid)

	if err != nil {
		return nil, err
	}

	return &model.Room{
		ID:           room.ID.Hex(),
		Messages:     convertMessages(room.Messages),
		State:        room.State,
		Participants: convertParticipants(room.Participants),
	}, nil
}

// OpenRoom is the resolver for the openRoom field.
func (r *mutationResolver) OpenRoom(ctx context.Context, roomid string) (*model.Room, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}
	room, err := r.MessagingService.ChangeRoomState(ctx, "OPEN", user.PublicUser{
		ID:    authedUser.ID,
		Email: authedUser.Email,
		Role:  user.Role(authedUser.Role),
	}, roomid)

	if err != nil {
		return nil, err
	}

	return &model.Room{
		ID:           room.ID.Hex(),
		Messages:     convertMessages(room.Messages),
		State:        room.State,
		Participants: convertParticipants(room.Participants),
	}, nil
}

// AddToHospital is the resolver for the addToHospital field.
func (r *mutationResolver) AddToHospital(ctx context.Context, userMail string, hospitalID string) (*model.Hospital, error) {
	panic("not implemented")
}

// AddReview is the resolver for the addReview field.
func (r *mutationResolver) AddReview(ctx context.Context, content string, hospitalID string) (*model.Hospital, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	fmt.Println(authedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	_, err := r.HospitalService.AddReview(ctx, content, authedUser.ID, hospitalID, user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	})

	if err != nil {
		return nil, err
	}

	hospital, err := r.HospitalService.GetHospital(ctx, hospitalID)
	if err != nil {
		return nil, err
	}

	return &model.Hospital{
		Reviews: convertHospitalReviewsToModelReviews(hospital.Reviews),
	}, nil
}

// AddRating is the resolver for the addRating field.
func (r *mutationResolver) AddRating(ctx context.Context, rating int32, hospitalID string) (*model.Hospital, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	fmt.Println(authedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	hospital, err := r.HospitalService.AddRating(ctx, rating, user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	}, hospitalID)

	if err != nil {
		return nil, err
	}

	hospital, err = r.HospitalService.GetHospital(ctx, hospitalID)
	if err != nil {
		return nil, err
	}

	return &model.Hospital{
		Ratings: hospital.Ratings,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	fmt.Println(authedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	publicUser, err := r.Resolver.UserService.Me(ctx, authedUser.ID)

	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:         publicUser.ID,
		Email:      publicUser.Email,
		Role:       model.Role(publicUser.Role),
		ProfilePic: publicUser.ProfilePic,
		Name:       publicUser.Name,
	}, nil
}

// MyDoctorProfile is the resolver for the myDoctorProfile field.
func (r *queryResolver) MyDoctorProfile(ctx context.Context) (*model.Doctor, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	doctor, err := r.UserService.MeDoctor(ctx, authedUser.ID)

	if err != nil {
		return nil, err
	}

	return &model.Doctor{
		User: &model.User{
			ID:         doctor.ID.Hex(),
			Name:       doctor.Name,
			ProfilePic: doctor.ProfilePic,
			Role:       model.Role(doctor.Role),
			Email:      doctor.Email,
		},
		Specialty: doctor.Specialty,
		Documents: doctor.Documents,
	}, nil
}

// GetMailBox is the resolver for the getMailBox field.
func (r *queryResolver) GetMailBox(ctx context.Context) (*model.MailBox, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	mailbox, err := r.MailService.GetMailBox(ctx, authedUser.Email)

	if err != nil {
		return nil, err
	}

	sentmails := convertMailSlice(mailbox.SentEMails)
	receivedmails := convertMailSlice(mailbox.ReceivedEmails)
	sentObjectids := convertObjectIDToStringSlice(mailbox.MailBox.Sent)
	receivedObjectids := convertObjectIDToStringSlice(mailbox.MailBox.Received)

	return &model.MailBox{
		ID:             mailbox.MailBox.ID.Hex(),
		Sentmails:      sentmails,
		ReceivedEmails: receivedmails,
		Sent:           sentObjectids,
		Received:       receivedObjectids,
		Email:          mailbox.MailBox.Email,
	}, nil
}

// GetRoom is the resolver for the getRoom field.
func (r *queryResolver) GetRoom(ctx context.Context, roomID string) (*model.Room, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}
	room, err := r.MessagingService.GetRoom(ctx, roomID, user.PublicUser{
		ID:    authedUser.ID,
		Email: authedUser.Email,
		Role:  user.Role(authedUser.Role),
	})
	if err != nil {
		return nil, err
	}
	return &model.Room{
		ID:           room.ID.Hex(),
		Messages:     convertMessages(room.Messages),
		Participants: convertParticipants(room.Participants),
		State:        room.State,
	}, nil
}

// GetS3Url is the resolver for the getS3Url field.
func (r *queryResolver) GetS3Url(ctx context.Context) (string, error) {
	_, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return "", fmt.Errorf("unauthorized: user not found in context")
	}

	return r.UploadService.GetPresignedURL()
}

// GetMailByID is the resolver for the getMailById field.
func (r *queryResolver) GetMailByID(ctx context.Context, id string) (*model.Application, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	mail, err := r.MailService.GetMail(ctx, id, authedUser.Email)

	if err != nil {
		return nil, err
	}

	return &model.Application{
		ID:             mail.ID.Hex(),
		Content:        mail.Content,
		PatientName:    mail.PatientName,
		Passport:       mail.Passport,
		Documents:      mail.Documents,
		CreatedAt:      mail.CreatedAt.Time().String(),
		ForwardedChain: mail.ForwardedChain,
		Type:           model.EmailType(mail.Type),
		Sender:         mail.Sender,
		Receiver:       mail.Receiver,
		PatientGender:  mail.PatientGender,
		PatientAge:     mail.PatientAge,
	}, err
}

// GetRoomsByID is the resolver for the getRoomsById field.
func (r *queryResolver) GetRoomsByID(ctx context.Context) ([]*model.Room, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	rooms, err := r.MessagingService.GetRoomsByID(ctx, authedUser.ID)
	if err != nil {
		return nil, err
	}

	var modelRooms []*model.Room
	for _, room := range rooms {
		modelRoom := &model.Room{
			ID:           room.ID.Hex(),
			Participants: make([]string, len(room.Participants)),
			Messages:     make([]*model.Message, len(room.Messages)),
		}

		for i, participant := range room.Participants {
			modelRoom.Participants[i] = participant.Hex()
		}

		for i, msg := range room.Messages {
			modelRoom.Messages[i] = &model.Message{
				Content: msg.Content,
				Author:  msg.Author,
			}
		}

		modelRooms = append(modelRooms, modelRoom)
	}

	return modelRooms, nil
}

// GetOrderID is the resolver for the getOrderId field.
func (r *queryResolver) GetOrderID(ctx context.Context) (string, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return "", fmt.Errorf("unauthorized: user not found in context")
	}

	return r.PaymentService.NewOrder(&payment.OrderRequest{
		Amount: 100,
	}, user.PublicUser{
		ID:    authedUser.ID,
		Role:  user.Role(authedUser.Role),
		Email: authedUser.Email,
	})
}

// GetHospital is the resolver for the getHospital field.
func (r *queryResolver) GetHospital(ctx context.Context) (*model.Hospital, error) {
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	switch user.Role(authedUser.Role) {
	case user.RoleRoot:
		hospital, err := r.HospitalService.CheckParticpant(ctx, "ROOT", authedUser.ID)
		if err != nil {
			return nil, err
		}
		return &model.Hospital{
			ID: hospital.ID.Hex(),
			Participants: &model.Participants{
				Roots:   convertParticipants(hospital.Participants.RootUsers),
				Staff:   convertParticipants(hospital.Participants.Staff),
				Doctors: convertParticipants(hospital.Participants.Doctors),
			},
		}, nil
	case user.RoleDoctor:
		hospital, err := r.HospitalService.CheckParticpant(ctx, "DOCTOR", authedUser.ID)
		if err != nil {
			return nil, err
		}

		return &model.Hospital{
			ID: hospital.ID.Hex(),
			Participants: &model.Participants{
				Roots:   convertParticipants(hospital.Participants.RootUsers),
				Staff:   convertParticipants(hospital.Participants.Staff),
				Doctors: convertParticipants(hospital.Participants.Doctors),
			},
		}, nil
	case user.RoleStaff:
		hospital, err := r.HospitalService.CheckParticpant(ctx, "STAFF", authedUser.ID)
		if err != nil {
			return nil, err
		}

		return &model.Hospital{
			ID: hospital.ID.Hex(),
			Participants: &model.Participants{
				Roots:   convertParticipants(hospital.Participants.RootUsers),
				Staff:   convertParticipants(hospital.Participants.Staff),
				Doctors: convertParticipants(hospital.Participants.Doctors),
			},
		}, nil
	default:
		return nil, errors.New("invalid role")

	}
}

// GetDoctorByID is the resolver for the getDoctorByID field.
func (r *queryResolver) GetDoctorByID(ctx context.Context, doctorID string) (*model.Doctor, error) {
	_, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	doctor, err := r.UserService.MeDoctor(ctx, doctorID)

	if err != nil {
		return nil, err
	}

	return &model.Doctor{
		User: &model.User{
			ID:         doctor.ID.Hex(),
			Name:       doctor.Name,
			Email:      doctor.Email,
			Role:       model.Role(doctor.Role),
			ProfilePic: doctor.ProfilePic,
		},
		Specialty: doctor.Specialty,
		Documents: doctor.Documents,
	}, nil
}

// GetHospitalByID is the resolver for the getHospitalByID field.
func (r *queryResolver) GetHospitalByID(ctx context.Context, hospitalID string) (*model.Hospital, error) {
	_, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}
	hospital, err := r.HospitalService.GetHospital(ctx, hospitalID)
	if err != nil {
		return nil, err
	}

	return &model.Hospital{
		ID: hospital.ID.Hex(),
		BasicInfo: &model.BasicInfo{
			HospitalName:       &hospital.BasicInfo.HospitalName,
			RegistrationNumber: &hospital.BasicInfo.RegistrationNumber,
			AddressInformation: &model.AddressInformation{
				StreetAddress: &hospital.BasicInfo.AddressInformation.StreetAddress,
				City:          &hospital.BasicInfo.AddressInformation.City,
				State:         &hospital.BasicInfo.AddressInformation.State,
				PinCode:       &hospital.BasicInfo.AddressInformation.PinCode,
			},
			ContactInformation: &model.ContactInformation{
				ContactPersonName: &hospital.BasicInfo.ContactInformation.ContactPersonName,
				ContactNumber:     &hospital.BasicInfo.ContactInformation.ContactNumber,
				ContactEmail:      &hospital.BasicInfo.ContactInformation.ContactEmail,
				Website:           &hospital.BasicInfo.ContactInformation.Website,
			},
			OperatingHours: &model.OperatingHours{
				OpeningTime: &hospital.BasicInfo.OperatingHours.OpeningTime,
				ClosingTime: &hospital.BasicInfo.OperatingHours.ClosingTime,
			},
		},
		Media: &model.Media{
			FrontURL:     &hospital.Media.FrontUrl,
			ReceptionURL: &hospital.Media.ReceptionUrl,
			OperationURL: &hospital.Media.OperationUrl,
		},
		Amenities: &model.Amenities{
			BedCapacity: &model.BedCapacity{
				GeneralWardBeds: &hospital.Amenities.BedCapacity.GeneralWardBeds,
				PrivateRoomBeds: &hospital.Amenities.BedCapacity.PrivateRoomBeds,
				EmergencyBeds:   &hospital.Amenities.BedCapacity.EmergencyBeds,
				IcuBeds:         &hospital.Amenities.BedCapacity.IcuBeds,
			},
			MedicalStaff: &model.MedicalStaff{
				PermenantDoctors:    &hospital.Amenities.MedicalStaff.PermenantDoctors,
				VisitingConsultants: &hospital.Amenities.MedicalStaff.VisitingConsultants,
				Nurses:              &hospital.Amenities.MedicalStaff.Nurses,
				SupportStaff:        &hospital.Amenities.MedicalStaff.SupportStaff,
			},
			Facilities:     convertStringToPointerStringArray(hospital.Amenities.Facilities),
			Specialization: convertStringToPointerStringArray(hospital.Amenities.Specialization),
		},
		Reviews:         convertHospitalReviewsToModelReviews(hospital.Reviews),
		PatientRating:   &hospital.PatientRating,
		Ratings:         hospital.Ratings,
		ConsultationFee: &hospital.ConsultationFee,
		Participants: &model.Participants{
			Roots:   convertParticipants(hospital.Participants.RootUsers),
			Staff:   convertParticipants(hospital.Participants.Staff),
			Doctors: convertParticipants(hospital.Participants.Doctors),
		},
	}, nil
}

// GetUserByID is the resolver for the getUserByID field.
func (r *queryResolver) GetUserByID(ctx context.Context, userID string) (*model.User, error) {
	_, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}
	user, err := r.UserService.Me(ctx, userID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:         user.ID,
		Email:      user.Email,
		Name:       user.Name,
		ProfilePic: user.ProfilePic,
	}, nil
}

// MailBoxSubscription is the resolver for the MailBoxSubscription field.
func (r *subscriptionResolver) MailBoxSubscription(ctx context.Context) (<-chan *model.MailBoxSubscriptionResponse, error) {
	fmt.Println("called")
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	return r.ObserverService.SubscribeToMail(ctx, authedUser.Email), nil
}

// MessageBoxSubscription is the resolver for the MessageBoxSubscription field.
func (r *subscriptionResolver) MessageBoxSubscription(ctx context.Context) (<-chan *model.MessageSubscriptionResponse, error) {
	fmt.Println("message box subscription was called")
	authedUser, ok := ctx.Value(UserContextKey).(AuthenticatedUser)
	if !ok {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}
	return r.ObserverService.SubscribeToMessage(ctx, authedUser.Email), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
