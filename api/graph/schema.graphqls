enum Role {
  ROOT
  DOCTOR
  STAFF
}

type User {
  id: ID!
  name: String!
  email: String!
  profilePic: String!
  role: Role!
}

type Doctor {
  user: User!
  specialty: String!
  documents: [String!]!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

input DoctorInput {
  specialty: String!
  documents: [String!]!
  name: String!
	password: String!
  email: String!
  hospitalId: String!
  profilePic: String!
 
}

input UserInput {
  name: String!
  email: String!
  profilePic: String!
  password: String!
  hospitalId: String!
}
input PatientInput {
  name: String!
  email: String!
  profilePic: String!
  password: String!
}

input TestUserInput {
  name: String!
  email: String!
  profilePic: String!
  password: String!
  role: String!
}

type MailBox {
  id: ID!
  email: String!
  sent: [ID]! 
  received: [ID]!
  sentmails: [Mail]!
  receivedEmails: [Mail]!

}

enum EmailType {
  APPLICATION
  NORMAL
}

type Mail {
  id: ID!
  sender: String!
  receiver: String!
  content: String!
  documents: [String]!
  type: EmailType!
  ForwardedChain: [String!]!
  createdAt: String!
}

input sendMailInput {
  hospitalId: String!  
  content: String! 
  patientName: String!
  patientAge: String!
  patientGender: String!
  phoneNumber: String!
  passport: String!
  allergies: String!
  documents: [String]
  razorpay_payment_id: String!
  razorpay_order_id: String!
  razorpay_signature: String!
}

type Application {
  id: ID!
  content: String! 
  patientName: String!
  sender: String!
  receiver: String!
  patientAge: String!
  documents: [String]
  patientGender: String!
  passport: String!
  phoneNumber: String!
  allergies: String!
  type: EmailType!
  ForwardedChain: [String!]!
  createdAt: String!
}

input sendNormalMailInput {
  receiver: String! 
  content: String!
  documents: [String]
}

input sendInvitationInput {
  receiver: String! 
  content: String!
  documents: [String!]!
}

type Room {
  id: ID! 
  messages: [Message]!
  participants: [ID!]!
  state: String!
}

type Message {
  content: String!
  author: String!
}

input sendMessageInput {
 content: String! 
 roomId: String!
}

type Review {
  content: String!
  author: String!
}

type Hospital {
  id: ID!
  basicInfo: BasicInfo
  media: Media
  amenities: Amenities
  onSiteVerification: OnSiteVerification
  onsiteRating: Int
  reviews: [Review!]!
  patientRating: Int
  ratings: [Int!]!
  consultationFee: Int
  participants: Participants
}

type BasicInfo {
  hospitalName: String
  registrationNumber: String
  contactInformation: ContactInformation
  addressInformation: AddressInformation
  operatingHours: OperatingHours
}

type ContactInformation {
  contactPersonName: String
  contactNumber: String
  contactEmail: String
  website: String
}

type AddressInformation {
  streetAddress: String
  city: String
  state: String
  pinCode: String
}

type OperatingHours {
  openingTime: String
  closingTime: String
}

type Media {
  frontUrl: String
  receptionUrl: String
  operationUrl: String
}

type Amenities {
  bedCapacity: BedCapacity
  medicalStaff: MedicalStaff
  facilities: [String]
  specialization: [String]
}

type BedCapacity {
  generalWardBeds: Int
  privateRoomBeds: Int
  emergencyBeds: Int
  icuBeds: Int
}


type MedicalStaff {
  permenantDoctors: Int
  visitingConsultants: Int
  nurses: Int
  supportStaff: Int
}

type OnSiteVerification {
  preferredDate: String
  preferredTime: String
  verificationContact: VerificationContact
}

type VerificationContact {
  name: String
  position: String
  phoneNumber: String
  alternatePhone: String
}

type Participants {
  roots: [String!]!
  staff: [String!]!
  doctors: [String!]!
}

type Query {
  me: User!
  myDoctorProfile: Doctor
  getMailBox: MailBox!
  getRoom(roomId: String!): Room!
  getS3Url: String!
  getMailById(id: String!): Application!
  getRoomsById: [Room!]!
  getOrderId: String!
  getHospital: Hospital!
  getDoctorByID(doctorId: String!): Doctor!
  getHospitalByID(hospitalId: String!): Hospital!
	getUserByID(userId: String!): User!
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  createDoctor(input: DoctorInput!): Doctor!
  createRoot(input: UserInput!): User!
  createStaff(input: UserInput!): User!
  createTestUser(input:TestUserInput!): User!
  sendApplication(input:sendMailInput!): Application!
  sendNormalMail(input:sendNormalMailInput!): Mail!
  sendInvitationMail(input: sendInvitationInput): Mail!
  startChat(particpantMail: String!): Room!
  sendMessage(input:sendMessageInput!): Room!
  forwardMail(mailId: String!, forwardTo: String!): Application!
  createPatient(input:PatientInput!): User!
  closeRoom(roomid: String!): Room!
  openRoom(roomid: String!): Room!
  addToHospital(userMail: String!, hospitalId: String!):Hospital!
	addReview(content: String!, hospitalId: String!): Hospital!
	addRating(rating: Int!, hospitalId: String!): Hospital!
}

type MailBoxSubscriptionResponse {
  sent: Application  
  received: Application
}

type MessageSubscriptionResponse {
  roomId: String!
  message: Message! 
}

type Subscription {
  MailBoxSubscription: MailBoxSubscriptionResponse! 
  MessageBoxSubscription: MessageSubscriptionResponse!
}
